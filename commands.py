from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, \
    ReplyKeyboardRemove
from telegram.ext import CallbackContext
from db_manager import DBManager, MenuRepository, CartRepository, UserRepository, OrderRepository
from prettytable import PrettyTable
from functools import partial





class CommandBase:
    def execute(self, update: Update, context: CallbackContext):
        raise NotImplementedError

class StartCommand(CommandBase):
    def execute(self, update: Update, context: CallbackContext):
        context.user_data['processing_order'] = False

        menu_button = InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", callback_data="MENU")
        cart_button = InlineKeyboardButton("üß∫ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ—à–∏–∫—É", callback_data="OPEN_CART")

        context.bot.send_message(chat_id=update.effective_chat.id,text= '–í—ñ—Ç–∞—é —É <b>ADP Pizza</b>! üçï –¶–µ –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, –∑–∞–≤–¥—è–∫–∏ —è–∫–æ–º—É –≤–∏ –∑–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –Ω–∞—à–∏–º –º–µ–Ω—é, '
            '–∑–∞–º–æ–≤–∏—Ç–∏ –ø—ñ—Ü—É —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫—Ü—ñ—ó.\n\n–°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å, –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ —É–ª—é–±–ª–µ–Ω—ñ —Å–º–∞–∫–∏ —Ç–∞ –Ω–∞—Å–æ–ª–æ–¥–∂—É–≤–∞—Ç–∏–º–µ—Ç–µ—Å—å –∫–æ–∂–Ω–∏–º —à–º–∞—Ç–æ—á–∫–æ–º! C–º–∞—á–Ω–æ–≥–æ! üçï', parse_mode='HTML',
                                 reply_markup=InlineKeyboardMarkup([[menu_button], [cart_button]]))


class MenuCommand(CommandBase):
    def __init__(self, menu_repository: MenuRepository):
        self.menu_repository = menu_repository

    def execute(self, update: Update, context: CallbackContext):
        context.user_data['processing_order'] = False

        rows = self.menu_repository.get_menu()

        keyboard = [[InlineKeyboardButton(row[0], callback_data=row[0])] for row in rows]
        keyboard.append([InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏", callback_data="SHOW_ALL")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        context.bot.send_message(chat_id=update.effective_chat.id, text='üìã –ú–µ–Ω—é <b>ADP Pizza</b>', parse_mode='HTML', reply_markup=reply_markup)



class DetailsCommand(CommandBase):
    def __init__(self, menu_repository: MenuRepository):
        self.menu_repository = menu_repository

    def execute(self, update: Update, context: CallbackContext):
        context.user_data['processing_order'] = False

        pizza_name = ' '.join(context.args)
        row = self.menu_repository.get_pizza_details(pizza_name)

        if row:
            message = f"üçï <b>{row[0]}</b>\n\nüí° <b>–°–∫–ª–∞–¥:</b> <i>{row[1]}</i>\n\nüíµ <b>–¶—ñ–Ω–∞:</b> {row[3]} –≥—Ä–Ω"
            cart_button = [[InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"ADD_TO_CART_{row[4]}")]]
            reply_markup = InlineKeyboardMarkup(cart_button)

            if row[2]:
                context.bot.send_photo(chat_id=update.effective_chat.id, photo=row[2], caption=message, parse_mode='HTML', reply_markup=reply_markup)
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='HTML', reply_markup=reply_markup)
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text="–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò∂‚Äçüå´Ô∏è")

    def show_all_details(self, update: Update, context: CallbackContext):
        context.user_data['processing_order'] = False

        rows = self.menu_repository.get_menu()
        for row in rows:
            pizza_name = row[0]
            context.args = [pizza_name]
            DetailsCommand(self.menu_repository).execute(update, context)



class CartHandler(CommandBase):
    def __init__(self, menu_repository: MenuRepository, cart_repository: CartRepository):
        self.menu_repository = menu_repository
        self.cart_repository = cart_repository

    def add_to_cart(self, user_id, product_id, update: Update, context: CallbackContext):
        context.user_data['processing_order'] = False

        menu_row = self.menu_repository.get_pizza_details_by_id(product_id)

        if menu_row:
            self.cart_repository.add_to_cart(user_id, product_id)

            cart_button = [[InlineKeyboardButton("üß∫ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ—à–∏–∫—É", callback_data="OPEN_CART")]]
            reply_markup = InlineKeyboardMarkup(cart_button)
            context.bot.send_message(chat_id=update.effective_chat.id, text="–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫ üß∫",
                                     reply_markup=reply_markup)
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text="–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò∂‚Äçüå´")


    def open_cart(self, user_id, update: Update, context: CallbackContext):
        context.user_data['processing_order'] = False

        rows = self.cart_repository.get_cart(user_id)

        output = PrettyTable()
        output.field_names = ["–ù–∞–∑–≤–∞", "N", "–°—É–º–∞"]

        order_button = InlineKeyboardButton("üìÑ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="START_ORDER")
        clean_button = InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="CLEAN")
        menu_button = InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", callback_data="MENU")
        keyboard = [[order_button], [clean_button], [menu_button]]

        if rows:
            output.add_rows(rows)
            total = sum(row[2] for row in rows)
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"<code>{output}</code>\n\nüíµ <b>–î–æ —Å–ø–ª–∞—Ç–∏:</b> {total} –≥—Ä–Ω", parse_mode='HTML',
                                     reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            context.bot.send_message(chat_id=update.effective_chat.id, text='–ù–∞—Ä–∞–∑—ñ –∫–æ—à–∏–∫ –ø—É—Å—Ç–∏–π üòî',
                                     reply_markup=InlineKeyboardMarkup([[menu_button]]))

    def clean_cart(self, user_id, update: Update, context: CallbackContext):
        context.user_data['processing_order'] = False

        self.cart_repository.clear_cart(user_id)

        menu_button = InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", callback_data="MENU")
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–∞—Ä–∞–∑—ñ –∫–æ—à–∏–∫ –ø—É—Å—Ç–∏–π üòî",
                                 reply_markup=InlineKeyboardMarkup([[menu_button]]))
class OrderHandler(CommandBase):
    def __init__(self, user_repository: UserRepository, order_repository: OrderRepository, cart_repository: CartRepository):
        self.user_repository = user_repository
        self.order_repository = order_repository
        self.cart_repository = cart_repository

    def start_order(self, user_id, update: Update, context: CallbackContext):
        context.user_data['processing_order'] = True

        user = self.user_repository.get_user(user_id)
        if user:
            self.request_order_confirmation(user_id, update, context)
        else:
            username = update.effective_user.username
            firstname = update.effective_user.first_name
            lastname = update.effective_user.last_name
            self.user_repository.add_user(user_id, username, firstname, lastname)
            self.request_phone_number(update, context)

    def confirm_order(self, update: Update, context: CallbackContext):
        if context.user_data['processing_order']:
            context.user_data['processing_order'] = False

            user_id = update.effective_user.id
            cart_items = self.cart_repository.get_cart(user_id)
            order_list = [(item[0], item[1], item[2]) for item in cart_items]
            total_price = sum(item[2] for item in cart_items)

            user_info = self.user_repository.get_user(user_id)
            phone_number = user_info[4]
            location = user_info[5]

            order_id = self.order_repository.create_order(user_id, phone_number, order_list, total_price, location)
            context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –∫—É—Ä'—î—Ä–∞ ‚ù£Ô∏è")
        else:
            StartCommand().execute(update, context)


    def request_phone_number(self, update: Update, context: CallbackContext):
        contact_keyboard = KeyboardButton('üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É', request_contact=True)
        contact_markup = ReplyKeyboardMarkup([[contact_keyboard]], one_time_keyboard=True)
        context.bot.send_message(chat_id=update.effective_chat.id, text='–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üì±',
                                 reply_markup=contact_markup)

    def request_location(self, update: Update, context: CallbackContext):
        context.bot.send_message(chat_id=update.effective_chat.id, text='–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ üó∫Ô∏è')

    def request_order_confirmation(self, user_id, update: Update, context: CallbackContext):
        if context.user_data['processing_order']:
            cart_items = self.cart_repository.get_cart(user_id)
            total = sum(item[2] for item in cart_items)

            output = PrettyTable()
            output.field_names = ["–ù–∞–∑–≤–∞", "N", "–°—É–º–∞"]
            output.add_rows(cart_items)

            user_data = self.user_repository.get_user(user_id)
            location = user_data[5].split("|") if user_data and user_data[5] else (0, 0)
            latitude, longitude = map(float, location)

            order_button = InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–ª–≤–µ–Ω–Ω—è", callback_data="CONFIRMED_ORDER")
            clean_button = InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="CANCELED_ORDER")
            menu_button = InlineKeyboardButton("üó∫Ô∏è –ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="CHANGE_LOCATION")
            keyboard = InlineKeyboardMarkup([[order_button], [clean_button], [menu_button]])

            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f'üìÑ –í–∞—à–µ –∑–∞–º–æ–ª–µ–Ω–Ω—è:\n<code>{output}</code>\n\nüíµ <b>–î–æ —Å–ø–ª–∞—Ç–∏:</b> {total}\n\nüì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user_data[4]}\nüó∫Ô∏è –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:',
                                     parse_mode='HTML')
            context.bot.send_location(chat_id=update.effective_chat.id, latitude=latitude, longitude=longitude,
                                      reply_markup=keyboard)
        else:
            StartCommand().execute(update, context)

    def get_phone_number(self, update: Update, context: CallbackContext):
        if context.user_data['processing_order']:
            user_id = update.effective_user.id
            phone_number = update.message.contact.phone_number
            self.user_repository.update_user_contact(user_id, phone_number=phone_number)
            context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ –ù–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())

            user_data = self.user_repository.get_user(user_id)
            if user_data[5] is None:
                self.request_location(update, context)
        else:
            StartCommand().execute(update, context)

    def get_location(self, update: Update, context: CallbackContext):
        if context.user_data['processing_order']:
            user_id = update.effective_user.id
            location = f"{update.message.location.latitude}|{update.message.location.longitude}"
            self.user_repository.update_user_contact(user_id, location=location)
            context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ –ê–¥—Ä–µ—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
            self.request_order_confirmation(user_id, update, context)
        else:
            StartCommand().execute(update, context)

    def cancel_order(self, update: Update, context: CallbackContext):
        if context.user_data['processing_order']:
            context.user_data['processing_order'] = False
            menu_button = InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", callback_data="MENU")
            cart_button = InlineKeyboardButton("üß∫ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ—à–∏–∫—É", callback_data="OPEN_CART")
            context.bot.send_message(chat_id=update.effective_chat.id, text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå",
                                     reply_markup=InlineKeyboardMarkup([[menu_button], [cart_button]]))
        else:
            StartCommand().execute(update, context)




class ButtonHandler(CommandBase):
    def __init__(self, menu_repository: MenuRepository, cart_repository: CartRepository, order_handler, cart_handler):
        self.menu_repository = menu_repository
        self.cart_repository = cart_repository
        self.order_handler = order_handler
        self.cart_handler = cart_handler

    def execute(self, update: Update, context: CallbackContext):
        query = update.callback_query
        query.answer()
        callback_data = query.data
        user_id = update.effective_user.id

        command_map = {
            "SHOW_ALL": partial(DetailsCommand(self.menu_repository).show_all_details, update, context),
            "OPEN_CART": partial(self.cart_handler.open_cart, user_id, update, context),
            "CLEAN": partial(self.cart_handler.clean_cart, user_id, update, context),
            "MENU": partial(MenuCommand(self.menu_repository).execute, update, context),
            "START_ORDER": partial(self.order_handler.start_order, user_id, update, context),
            "CANCELED_ORDER": partial(self.order_handler.cancel_order, update, context),
            "CHANGE_LOCATION": partial(self.order_handler.request_location, update, context),
            "CONFIRMED_ORDER": partial(self.order_handler.confirm_order, update, context)
        }

        if callback_data.startswith("ADD_TO_CART_"):
            product_id = callback_data.split("_", 3)[-1]
            self.cart_handler.add_to_cart(user_id, product_id, update, context)
        else:
            command_key = callback_data
            command = command_map.get(command_key)
            if command:
                command()
            elif callback_data not in command_map:
                pizza_name = callback_data
                context.args = [pizza_name]
                DetailsCommand(self.menu_repository).execute(update, context)








