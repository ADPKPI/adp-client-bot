import unittest
from unittest.mock import patch, MagicMock
from telegram import Update, Chat, Message, User, InlineKeyboardMarkup, Bot, CallbackQuery
from telegram.ext import CallbackContext

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥—ã StartCommand –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
from commands import StartCommand, MenuCommand, DetailsCommand, ButtonHandler

class TestStartCommand(unittest.TestCase):
    def setUp(self):
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.bot = MagicMock()
        self.update = MagicMock(spec=Update)
        self.context = MagicMock(spec=CallbackContext)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ Update, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.update.effective_chat = Chat(id=123, type='private')
        self.update.message = Message(message_id=1, date=None, chat=self.update.effective_chat,
                                      from_user=User(id=456, first_name='Test User', is_bot=False),
                                      text='/start', bot=self.bot)

    @patch('commands.Update')
    def test_start_command_sends_correct_message(self, mock_update):
        StartCommand.execute(self, self.update, self.context)
        self.bot.send_message.assert_called_once()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
        called_args, called_kwargs = self.bot.send_message.call_args
        self.assertEqual(called_kwargs['chat_id'], 123)
        self.assertIn('–í—ñ—Ç–∞—é —É <b>ADP Pizza</b>', called_kwargs['text'])
        self.assertEqual(called_kwargs['parse_mode'], 'HTML')


class TestMenuCommand(unittest.TestCase):
    def setUp(self):
        self.bot = MagicMock(spec=Bot)
        self.chat_id = 12345
        self.user = User(id=456, first_name='Test User', is_bot=False)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç–∞
        self.message = Message(message_id=123, date=None, chat=Chat(id=self.chat_id, type='private'),
                               from_user=self.user, text='/menu', bot=self.bot)
        self.update = MagicMock(spec=Update, message=self.message)

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ CallbackContext
        self.context = MagicMock(spec=CallbackContext, bot=self.bot)

    @patch('commands.DBManager.get_connection')
    def test_menu_command_sends_buttons(self, mock_get_connection):
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        mock_cursor = MagicMock()
        mock_connection = mock_get_connection.return_value
        mock_connection.cursor.return_value = mock_cursor
        mock_cursor.fetchall.return_value = [('Margherita',), ('Pepperoni',)]

        menu_command = MenuCommand()
        menu_command.execute(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ send_message –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.bot.send_message.assert_called_once()
        args, kwargs = self.bot.send_message.call_args

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ kwargs —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è reply_markup —Å InlineKeyboardMarkup
        self.assertIsInstance(kwargs['reply_markup'], InlineKeyboardMarkup)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
        buttons = kwargs['reply_markup'].inline_keyboard
        self.assertEqual(len(buttons), 3)  # 2 –ø–∏—Ü—Ü—ã + 1 –∫–Ω–æ–ø–∫–∞ "Show All"


class TestDetailsCommand(unittest.TestCase):
    def setUp(self):
        self.bot = MagicMock(spec=Bot)
        self.update = MagicMock(spec=Update)
        self.context = MagicMock(spec=CallbackContext)
        self.context.args = ['Margherita']

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ update –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.chat_id = 12345
        self.update.effective_chat = Chat(self.chat_id, 'private')
        self.update.message = Message(message_id=1, date=None, chat=self.update.effective_chat,
                                      from_user=User(1, 'test', False), text='/details Margherita', bot=self.bot)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ context.bot –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
        self.context.bot = self.bot

    @patch('commands.DBManager.get_connection')
    def test_details_command(self, mock_get_connection):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        mock_cursor = MagicMock()
        mock_connection = MagicMock()
        mock_get_connection.return_value = mock_connection
        mock_connection.cursor.return_value = mock_cursor

        # –ó–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è fetchone()
        # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –∞ –Ω–µ MagicMock –æ–±—ä–µ–∫—Ç–∞–º–∏
        mock_cursor.fetchone.return_value = (
        'Margherita', 'Delicious tomato and cheese', 'http://example.com/photo.jpg', 10)

        details_command = DetailsCommand()
        details_command.execute(self.update, self.context)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ send_photo –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.bot.send_photo.assert_called_once_with(
            chat_id=self.chat_id,
            photo='http://example.com/photo.jpg',
            caption='üçï <b>Margherita</b>\n\nüí° <b>–°–∫–ª–∞–¥:</b> <i>Delicious tomato and cheese</i>\n\nüíµ <b>–¶—ñ–Ω–∞:</b> 10 –≥—Ä–Ω',
            parse_mode='HTML'
        )


if __name__ == '__main__':
    unittest.main()
